//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Player controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Playercontrols : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Playercontrols()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player controls"",
    ""maps"": [
        {
            ""name"": ""LeftCannon"",
            ""id"": ""41bc3955-e0c4-460c-a345-adb532e2cf92"",
            ""actions"": [
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""202427d4-4257-4b74-9374-1add72abb340"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""58712929-2a91-41a7-b736-83f9bd0fdb75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d3e283a-040a-4bc9-9e13-c61031ceb1e1"",
                    ""path"": ""<HID::Teensyduino Serial/Keyboard/Mouse/Joystick>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89e8ffb6-5f99-4276-b43a-30bfd769776f"",
                    ""path"": ""<HID::Teensyduino Serial/Keyboard/Mouse/Joystick>/button4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightCannon"",
            ""id"": ""5e0c3885-344f-49e4-9d96-6c7e5e7d3bbb"",
            ""actions"": [
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""5da8abe4-32fe-4029-9b7c-8f96064f49ab"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""dec6b1b8-b6c8-46dc-b9b3-0729a01e85dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94bc40b7-351a-4679-aded-aaeae6f733b8"",
                    ""path"": ""<HID::Teensyduino Serial/Keyboard/Mouse/Joystick>/rz"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef9401bf-84d3-44f1-8ec2-58235a5b2656"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b619233-917d-406f-8a5b-1660af49c3f6"",
                    ""path"": ""<HID::Teensyduino Serial/Keyboard/Mouse/Joystick>/button5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ship"",
            ""id"": ""d9944cfb-2406-4ef0-a9ce-a9b46de72db3"",
            ""actions"": [
                {
                    ""name"": ""SteeringLeft"",
                    ""type"": ""Button"",
                    ""id"": ""40166801-6028-438c-8b51-fa1534297612"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SteeringRight"",
                    ""type"": ""Button"",
                    ""id"": ""abb9e890-fa10-4b73-9017-3b63681781b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Speed"",
                    ""type"": ""Value"",
                    ""id"": ""3115036c-fab2-4b0a-b05d-67145af92544"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0aba260c-d382-4f5e-8ccb-f49ca8c2ba02"",
                    ""path"": ""<HID::Teensyduino Serial/Keyboard/Mouse/Joystick>/button8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteeringLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e060f124-e029-4336-9c3b-2b2b8ed2d939"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteeringLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e95fbe1-956e-43ca-9d69-5413b6c0ac41"",
                    ""path"": ""<HID::Teensyduino Serial/Keyboard/Mouse/Joystick>/button7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteeringRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bcb0d7f-cc98-4346-a64f-ee813522eb27"",
                    ""path"": ""<HID::Teensyduino Serial/Keyboard/Mouse/Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftCannon
        m_LeftCannon = asset.FindActionMap("LeftCannon", throwIfNotFound: true);
        m_LeftCannon_Steer = m_LeftCannon.FindAction("Steer", throwIfNotFound: true);
        m_LeftCannon_Shoot = m_LeftCannon.FindAction("Shoot", throwIfNotFound: true);
        // RightCannon
        m_RightCannon = asset.FindActionMap("RightCannon", throwIfNotFound: true);
        m_RightCannon_Steer = m_RightCannon.FindAction("Steer", throwIfNotFound: true);
        m_RightCannon_Shoot = m_RightCannon.FindAction("Shoot", throwIfNotFound: true);
        // Ship
        m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
        m_Ship_SteeringLeft = m_Ship.FindAction("SteeringLeft", throwIfNotFound: true);
        m_Ship_SteeringRight = m_Ship.FindAction("SteeringRight", throwIfNotFound: true);
        m_Ship_Speed = m_Ship.FindAction("Speed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftCannon
    private readonly InputActionMap m_LeftCannon;
    private ILeftCannonActions m_LeftCannonActionsCallbackInterface;
    private readonly InputAction m_LeftCannon_Steer;
    private readonly InputAction m_LeftCannon_Shoot;
    public struct LeftCannonActions
    {
        private @Playercontrols m_Wrapper;
        public LeftCannonActions(@Playercontrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steer => m_Wrapper.m_LeftCannon_Steer;
        public InputAction @Shoot => m_Wrapper.m_LeftCannon_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_LeftCannon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftCannonActions set) { return set.Get(); }
        public void SetCallbacks(ILeftCannonActions instance)
        {
            if (m_Wrapper.m_LeftCannonActionsCallbackInterface != null)
            {
                @Steer.started -= m_Wrapper.m_LeftCannonActionsCallbackInterface.OnSteer;
                @Steer.performed -= m_Wrapper.m_LeftCannonActionsCallbackInterface.OnSteer;
                @Steer.canceled -= m_Wrapper.m_LeftCannonActionsCallbackInterface.OnSteer;
                @Shoot.started -= m_Wrapper.m_LeftCannonActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_LeftCannonActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_LeftCannonActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_LeftCannonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Steer.started += instance.OnSteer;
                @Steer.performed += instance.OnSteer;
                @Steer.canceled += instance.OnSteer;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public LeftCannonActions @LeftCannon => new LeftCannonActions(this);

    // RightCannon
    private readonly InputActionMap m_RightCannon;
    private IRightCannonActions m_RightCannonActionsCallbackInterface;
    private readonly InputAction m_RightCannon_Steer;
    private readonly InputAction m_RightCannon_Shoot;
    public struct RightCannonActions
    {
        private @Playercontrols m_Wrapper;
        public RightCannonActions(@Playercontrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steer => m_Wrapper.m_RightCannon_Steer;
        public InputAction @Shoot => m_Wrapper.m_RightCannon_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_RightCannon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightCannonActions set) { return set.Get(); }
        public void SetCallbacks(IRightCannonActions instance)
        {
            if (m_Wrapper.m_RightCannonActionsCallbackInterface != null)
            {
                @Steer.started -= m_Wrapper.m_RightCannonActionsCallbackInterface.OnSteer;
                @Steer.performed -= m_Wrapper.m_RightCannonActionsCallbackInterface.OnSteer;
                @Steer.canceled -= m_Wrapper.m_RightCannonActionsCallbackInterface.OnSteer;
                @Shoot.started -= m_Wrapper.m_RightCannonActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_RightCannonActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_RightCannonActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_RightCannonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Steer.started += instance.OnSteer;
                @Steer.performed += instance.OnSteer;
                @Steer.canceled += instance.OnSteer;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public RightCannonActions @RightCannon => new RightCannonActions(this);

    // Ship
    private readonly InputActionMap m_Ship;
    private IShipActions m_ShipActionsCallbackInterface;
    private readonly InputAction m_Ship_SteeringLeft;
    private readonly InputAction m_Ship_SteeringRight;
    private readonly InputAction m_Ship_Speed;
    public struct ShipActions
    {
        private @Playercontrols m_Wrapper;
        public ShipActions(@Playercontrols wrapper) { m_Wrapper = wrapper; }
        public InputAction @SteeringLeft => m_Wrapper.m_Ship_SteeringLeft;
        public InputAction @SteeringRight => m_Wrapper.m_Ship_SteeringRight;
        public InputAction @Speed => m_Wrapper.m_Ship_Speed;
        public InputActionMap Get() { return m_Wrapper.m_Ship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
        public void SetCallbacks(IShipActions instance)
        {
            if (m_Wrapper.m_ShipActionsCallbackInterface != null)
            {
                @SteeringLeft.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnSteeringLeft;
                @SteeringLeft.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnSteeringLeft;
                @SteeringLeft.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnSteeringLeft;
                @SteeringRight.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnSteeringRight;
                @SteeringRight.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnSteeringRight;
                @SteeringRight.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnSteeringRight;
                @Speed.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnSpeed;
                @Speed.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnSpeed;
                @Speed.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnSpeed;
            }
            m_Wrapper.m_ShipActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SteeringLeft.started += instance.OnSteeringLeft;
                @SteeringLeft.performed += instance.OnSteeringLeft;
                @SteeringLeft.canceled += instance.OnSteeringLeft;
                @SteeringRight.started += instance.OnSteeringRight;
                @SteeringRight.performed += instance.OnSteeringRight;
                @SteeringRight.canceled += instance.OnSteeringRight;
                @Speed.started += instance.OnSpeed;
                @Speed.performed += instance.OnSpeed;
                @Speed.canceled += instance.OnSpeed;
            }
        }
    }
    public ShipActions @Ship => new ShipActions(this);
    public interface ILeftCannonActions
    {
        void OnSteer(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface IRightCannonActions
    {
        void OnSteer(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
    public interface IShipActions
    {
        void OnSteeringLeft(InputAction.CallbackContext context);
        void OnSteeringRight(InputAction.CallbackContext context);
        void OnSpeed(InputAction.CallbackContext context);
    }
}
